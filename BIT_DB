--*go ahead select all columns and 20 rows from customers*--

SELECT * 
FROM BIT_DB.customers 
LIMIT 20 ;

--*do same thing with JanSales*--

SELECT * 
FROM BIT_DB.JanSales 
LIMIT 20 ;

--*how many orders placed in Jan*--

SELECT COUNT(*) 
FROM BIT_DB.JanSales ;

--*How many of those orders were for an iPhone?*--

SELECT COUNT(*) 
FROM BIT_DB.JanSales 
WHERE product = 'iPhone' ; 

--*Select customer account num for all orders placed in Feb*--

SELECT customers.acctnum
FROM BIT_DB.FebSales FebSales
INNER JOIN BIT_DB.customers customers
ON FebSales.orderID=customers.order_id ;

--*Which product was the cheapest one sold in January, and what was the price?*--

SELECT product, MIN(price) 
FROM BIT_DB.JanSales 
GROUP BY product, price 
ORDER BY price ASC 
LIMIT 1 ;

--*What is the total revenue for each product sold in January?*--

SELECT product, SUM(quantity*price) AS Total_Price 
FROM BIT_DB.JanSales 
GROUP BY product ;

--*What products in Feb at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?*--

SELECT * 
FROM BIT_DB.FebSales 
LIMIT 20 ;

SELECT Product, Quantity, SUM(Quantity*Price) AS Revenue 
FROM BIT_DB.FebSales 
WHERE location = '548 Lincoln St, Seattle, WA 98101' ;

--*List all the products sold in Los Angeles in February, and include how many of each were sold.
*--

SELECT product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE location like '%Los Angeles%'
GROUP BY product;

--*How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?*--

SELECT count(cust.acctnum), AVG(quantity*price) AS Average_Spent 
FROM BIT_DB.FebSales Feb 
LEFT JOIN BIT_DB.customers Cust 
ON Feb.orderid=Cust.order_id 
WHERE quantity > 2 ;


--*Which locations in New York received at least 3 orders in January, and how many orders did they each receive?*--

SELECT *
FROM BIT_DB.JanSales
LIMIT 5;

SELECT location, count(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
GROUP BY location
HAVING count(orderID) > 2;

--*How many of each type of headphone were sold in February?*--

SELECT *
FROM BIT_DB.FebSales
LIMIT 30;

SELECT product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE product LIKE '%headphones%'
GROUP BY product;

--*What was the average amount spent per account in February?*--

SELECT *
FROM BIT_DB.FebSales
LIMIT 5;

SELECT *
FROM BIT_DB.customers
LIMIT 5;

SELECT AVG(quantity*price)
FROM BIT_DB.FebSales feb
LEFT JOIN BIT_DB.customers cust
ON feb.orderID = cust.order_id;


--*What was the average quantity of products purchased per account in February?*--

SELECT *
FROM BIT_DB.FebSales
LIMIT 5;

SELECT *
FROM BIT_DB.customers
LIMIT 5;

SELECT SUM(quantity)/COUNT(cust.acctnum)
FROM BIT_DB.FebSales feb
LEFT JOIN BIT_DB.customers cust
ON feb.orderID = cust.order_id;


--*Which product brought in the most revenue in January and how much revenue did it bring in total?*--

SELECT *
FROM BIT_DB.JanSales
LIMIT 5;

SELECT product, SUM(quantity*price)
FROM BIT_DB.JanSales
GROUP BY product
ORDER BY SUM(quantity*price) desc
LIMIT 1;





-----***SPOTIFY*------

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

SELECT *
FROM BIT_DB.Spotifydata
LIMIT 1;

--*What is the average danceability by artist and track?*--

SELECT artist_name, track_name, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY track_name

--*Who are the top 10 artists based on popularity?*--

SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

--*What artist released the longest song?*--

SELECT artist_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms desc
LIMIT 1;

--*What's the average danceability for the 10 most popular songs?*--

SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

--*calculate the average popularity for the artists in the table. Then, for every artist with an average popularity of 90 or above, you need to show their name, their average popularity, and label them as a “Top Star”.*--

WITH popularity_CTE AS (
SELECT avg(s.popularity) AS avg_popularity, s.artist_name
FROM Spotifydata s
GROUP BY s.artist_name
)

SELECT artist_name, avg_popularity, 'Top Star' AS tag
FROM popularity_CTE
WHERE avg_popularity>=90;
